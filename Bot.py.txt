import asyncio
import re
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from dotenv import load_dotenv
import os
import json
import smtplib
from email.mime.text import MIMEText

# Загружаем токен и данные для email из .env файла
load_dotenv()
API_TOKEN = os.getenv("TOKEN")
EMAIL_LOGIN = os.getenv("EMAIL_LOGIN")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")

if not API_TOKEN or not EMAIL_LOGIN or not EMAIL_PASSWORD:
    print("❌ Необходимые данные не найдены! Проверьте файл .env")
    exit()

# Инициализация бота и диспетчера
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# Состояния для FSM
class UserState(StatesGroup):
    entering_email = State()
    entering_fio_phone = State()

# Данные пользователей (хранятся в оперативной памяти)
user_data = {}
user_stats = {}

# Вопросы для тестов (по 20 вопросов в каждом тесте)
tests = [
    {
        "name": "Тест 1",
        "questions": [
            {"q": "Что такое инфляция?", "options": ["Рост цен", "Падение цен", "Стабильные цены"], "answer": 0},
            {"q": "Что такое актив?", "options": ["Доход", "Имущество, которое приносит доход", "Долг"], "answer": 1},
            {"q": "Что такое пассив?", "options": ["Доход", "Имущество, которое создает расходы", "Резерв"], "answer": 1},
            {"q": "Как называется документ, который показывает финансовый статус компании?", "options": ["Отчет", "Баланс", "Справка"], "answer": 1},
            {"q": "Что означает аббревиатура ROI?", "options": ["Rate of Interest", "Return on Investment", "Risk of Income"], "answer": 1},
            {"q": "Какой метод расчета амортизации предполагает одинаковую сумму?", "options": ["Линейный", "Прогрессивный", "Декрементный"], "answer": 0},
            {"q": "Как называется процесс анализа финансовых результатов?", "options": ["Аудит", "Финансовый анализ", "Контроль"], "answer": 1},
            {"q": "Что такое акции?", "options": ["Кредит", "Доля в компании", "Готівка"], "answer": 1},
            {"q": "Как называется периодическая выплата дохода по облигациям?", "options": ["Дивиденды", "Проценты", "Ренты"], "answer": 1},
            {"q": "Что такое ликвидность?", "options": ["Возможность быстро продать актив", "Сумма задолженности", "Уровень доходности"], "answer": 0},
            {"q": "Как называется документ, который показывает прибыли и убытки?", "options": ["Баланс", "Отчет о прибылях и убытках", "Отчет о текущем состоянии"], "answer": 1},
            {"q": "Что такое кредит?", "options": ["Задолженность", "Готівка", "Доход"], "answer": 0},
            {"q": "Как называется процесс получения средств от инвестирования?", "options": ["Инвестиции", "Доходы", "Прибыль"], "answer": 1},
            {"q": "Что такое депозит?", "options": ["Кредит", "Сбережения", "Доход"], "answer": 1},
            {"q": "Как называется процесс управления денежными средствами?", "options": ["Финансовый контроль", "Финансовый анализ", "Финансовое планирование"], "answer": 2},
            {"q": "Что такое облигации?", "options": ["Доход", "Задолженность", "Кредит"], "answer": 1},
            {"q": "Как называется процесс снижения стоимости валюты?", "options": ["Инфляция", "Дефляция", "Стагнация"], "answer": 1},
            {"q": "Что такое мультипликатор?", "options": ["Задолженность", "Коэффициент", "Доход"], "answer": 1},
            {"q": "Как называется процесс увеличения стоимости валюты?", "options": ["Инфляция", "Дефляция", "Стагнация"], "answer": 0},
            {"q": "Что такое бюджет?", "options": ["Зарплата", "План доходов и расходов", "Задолженность"], "answer": 1},
        ]
    },
    {
        "name": "Тест 2",
        "questions": [
            {"q": "Что такое кредитный рейтинг?", "options": ["Оценка кредитоспособности", "Оценка риска", "Оценка активов"], "answer": 0},
            {"q": "Как называется процесс расчета налогов?", "options": ["Налоговый контроль", "Налоговая операция", "Налоговый анализ"], "answer": 1},
            {"q": "Что такое депозитный сертификат?", "options": ["Документ, подтверждающий вклад", "Документ, подтверждающий кредит", "Документ, подтверждающий акции"], "answer": 0},
            {"q": "Как называется процесс получения дохода от инвестиций?", "options": ["Инвестиции", "Доходы", "Прибыль"], "answer": 1},
            {"q": "Что такое расчетная единица?", "options": ["Единица для измерения времени", "Единица для измерения денег", "Единица для измерения товаров"], "answer": 1},
            {"q": "Как называется процесс анализа финансовых результатов?", "options": ["Аудит", "Финансовый анализ", "Контроль"], "answer": 1},
            {"q": "Что такое акции?", "options": ["Кредит", "Доля в компании", "Готівка"], "answer": 1},
            {"q": "Как называется периодическая выплата дохода по облигациям?", "options": ["Дивиденды", "Проценты", "Ренты"], "answer": 1},
            {"q": "Что такое ликвидность?", "options": ["Возможность быстро продать актив", "Сумма задолженности", "Уровень доходности"], "answer": 0},
            {"q": "Как называется документ, который показывает прибыли и убытки?", "options": ["Баланс", "Отчет о прибылях и убытках", "Отчет о текущем состоянии"], "answer": 1},
            {"q": "Что такое кредит?", "options": ["Задолженность", "Готівка", "Доход"], "answer": 0},
            {"q": "Как называется процесс получения средств от инвестирования?", "options": ["Инвестиции", "Доходы", "Прибыль"], "answer": 1},
            {"q": "Что такое депозит?", "options": ["Кредит", "Сбережения", "Доход"], "answer": 1},
            {"q": "Как называется процесс управления денежными средствами?", "options": ["Финансовый контроль", "Финансовый анализ", "Финансовое планирование"], "answer": 2},
            {"q": "Что такое облигации?", "options": ["Доход", "Задолженность", "Кредит"], "answer": 1},
            {"q": "Как называется процесс снижения стоимости валюты?", "options": ["Инфляция", "Дефляция", "Стагнация"], "answer": 1},
            {"q": "Что такое мультипликатор?", "options": ["Задолженность", "Коэффициент", "Доход"], "answer": 1},
            {"q": "Как называется процесс увеличения стоимости валюты?", "options": ["Инфляция", "Дефляция", "Стагнация"], "answer": 0},
            {"q": "Что такое бюджет?", "options": ["Зарплата", "План доходов и расходов", "Задолженность"], "answer": 1},
            {"q": "Как называется процесс увеличения активов компании?", "options": ["Инвестиции", "Кредит", "Депозит"], "answer": 0},
        ]
    },
    {
        "name": "Тест 3",
        "questions": [
            {"q": "Что такое финансовая независимость?", "options": ["Отсутствие долгов", "Доход превышает расходы", "Сбережения"], "answer": 1},
            {"q": "Как называется процесс распределения средств между категориями?", "options": ["Бюджетирование", "Сбережение", "Инвестирование"], "answer": 0},
            {"q": "Что такое пенсионный фонд?", "options": ["Фонд для зарплат", "Фонд для пенсионных взносов", "Фонд для инвестиций"], "answer": 1},
            {"q": "Как называется процесс расчета стоимости активов?", "options": ["Оценка", "Анализ", "Расчет"], "answer": 0},
            {"q": "Что такое рынок акций?", "options": ["Место для торговли продуктами", "Место для торговли акциями", "Место для торговли валютами"], "answer": 1},
            {"q": "Как называется процесс получения дохода от депозитов?", "options": ["Депозитный процент", "Депозитный счет", "Депозитный анализ"], "answer": 0},
            {"q": "Что такое финансовая стратегия?", "options": ["План действий для получения прибыли", "План действий для сохранения денег", "План действий для инвестирования"], "answer": 0},
            {"q": "Как называется процесс получения дохода от акций?", "options": ["Дивиденды", "Проценты", "Ренты"], "answer": 0},
            {"q": "Что такое финансовая грамотность?", "options": ["Знания о деньгах", "Знания об инвестициях", "Знания о кредитах"], "answer": 0},
            {"q": "Как называется процесс управления денежными средствами?", "options": ["Финансовый контроль", "Финансовый анализ", "Финансовое планирование"], "answer": 2},
            {"q": "Что такое кредитный портфель?", "options": ["Общая сумма кредитов", "Общая сумма вкладов", "Общая сумма инвестиций"], "answer": 0},
            {"q": "Как называется процесс анализа рисков?", "options": ["Аудит", "Финансовый анализ", "Рисковый анализ"], "answer": 2},
            {"q": "Что такое финансовая стабильность?", "options": ["Задолженность", "Доход", "Стабильность денежного потока"], "answer": 2},
            {"q": "Как называется процесс получения дохода от инвестиций?", "options": ["Инвестиции", "Доходы", "Прибыль"], "answer": 1},
            {"q": "Что такое финансовая безопасность?", "options": ["Задолженность", "Доход", "Защита денег"], "answer": 2},
            {"q": "Как называется процесс анализа финансовых результатов?", "options": ["Аудит", "Финансовый анализ", "Контроль"], "answer": 1},
            {"q": "Что такое финансовый анализ?", "options": ["Анализ кредитов", "Анализ прибылей и убытков", "Анализ активов"], "answer": 1},
            {"q": "Как называется процесс увеличения активов компании?", "options": ["Инвестиции", "Кредит", "Депозит"], "answer": 0},
            {"q": "Что такое кеш-фло?", "options": ["Зарплата", "Поток наличности", "Задолженность"], "answer": 1},
            {"q": "Как называется процесс анализа рисков?", "options": ["Аудит", "Финансовый анализ", "Рисковый анализ"], "answer": 2},
        ]
    }
]

# Функция для определения результата теста
def get_result(score):
    if score <= 5:
        return "Плохой финансист"
    elif score <= 10:
        return "Средний финансист"
    elif score <= 15:
        return "Хороший финансист"
    else:
        return "Отличный финансист"

# Команда /start
@router.message(CommandStart())
async def send_welcome(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.username or "Пользователь"
    
    # Инициализация данных пользователя
    if user_id not in user_stats:
        user_stats[user_id] = {"username": user_name, "completed_tests": []}
    
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=False,
        keyboard=[
            [KeyboardButton(text="Тесты")],
            [KeyboardButton(text="Профиль")]
        ]
    )
    
    await message.answer(f"👋 Привет, {user_name}! Я бот для финансовых тестов. Выбери действие:", reply_markup=keyboard)

# Обработка выбора теста
@router.message(lambda message: message.text == "Тесты")
async def handle_test_selection(message: Message):
    user_id = message.from_user.id
    
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=False,
        keyboard=[
            [KeyboardButton(text="Тест 1")],
            [KeyboardButton(text="Тест 2")],
            [KeyboardButton(text="Тест 3")],
            [KeyboardButton(text="🏠 Главное меню")]
        ]
    )
    
    await message.answer("Выберите тест:", reply_markup=keyboard)

# Начало теста
@router.message(lambda message: message.text in ["Тест 1", "Тест 2", "Тест 3"])
async def start_test(message: Message):
    user_id = message.from_user.id
    test_number = int(message.text.split()[1]) - 1
    
    # Проверка доступа к тесту
    if test_number > 0 and test_number - 1 not in user_stats[user_id]["completed_tests"]:
        await message.answer("❌ Для доступа к этому тесту необходимо пройти предыдущие тесты.")
        return
    
    user_data[user_id] = {"score": 0, "q_index": 0, "test_number": test_number}
    await send_question(user_id)

# Отправка вопроса
async def send_question(user_id):
    q_index = user_data[user_id]["q_index"]
    test_number = user_data[user_id]["test_number"]
    question = tests[test_number]["questions"][q_index]
    
    # Кнопки для ответов
    keyboard_buttons = [[KeyboardButton(text=option)] for option in question["options"]]
    
    # Добавляем кнопки "Назад" и "Главное меню"
    extra_buttons = []
    if q_index > 0:
        extra_buttons.append([KeyboardButton(text="⬅️ Назад")])
    extra_buttons.append([KeyboardButton(text="🏠 Главное меню")])
    
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=False,
        keyboard=keyboard_buttons + extra_buttons
    )
    
    await bot.send_message(user_id, f"Питання {q_index + 1}: {question['q']}", reply_markup=keyboard)

# Обработка ответов
@router.message()
async def handle_answer(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        # Если пользователь не в режиме теста
        if message.text == "Профиль":
            await show_profile(message)
        elif message.text == "🏠 Главное меню":
            await send_welcome(message)
        else:
            await message.answer("Выберите тест или действие из главного меню.")
        return
    
    q_index = user_data[user_id]["q_index"]
    test_number = user_data[user_id]["test_number"]
    
    if message.text == "⬅️ Назад":
        if q_index > 0:
            user_data[user_id]["q_index"] -= 1
            await send_question(user_id)
        else:
            await message.answer("Это первое вопрос. Назад нельзя.")
        return
    
    if message.text == "🏠 Главное меню":
        await send_welcome(message)
        user_data.pop(user_id, None)
        return
    
    question = tests[test_number]["questions"][q_index]
    if message.text in question["options"]:
        if message.text == question["options"][question["answer"]]:
            user_data[user_id]["score"] += 1
        user_data[user_id]["q_index"] += 1
        
        if user_data[user_id]["q_index"] < len(tests[test_number]["questions"]):
            await send_question(user_id)
        else:
            # Завершение теста
            score = user_data[user_id]["score"]
            result = get_result(score)
            user_stats[user_id]["completed_tests"].append(test_number)
            
            if test_number == 1:
                await message.answer(f"✅ Тест завершен! Ваш результат: {score}/20 ({result})")
                await request_email(user_id)
            elif test_number == 2:
                await message.answer(f"✅ Тест завершен! Ваш результат: {score}/20 ({result})")
                await request_fio_phone(user_id)
            else:
                await message.answer(f"✅ Тест завершен! Ваш результат: {score}/20 ({result})")
                await send_welcome(message)
            
            user_data.pop(user_id, None)
    else:
        await message.answer("❌ Пожалуйста, выберите один из доступных вариантов.")

# Запрос email после второго теста
async def request_email(user_id):
    await bot.send_message(user_id, "Введите ваш email для отправки результатов:")
    await UserState.entering_email.set()

@router.message(UserState.entering_email)
async def handle_email(message: Message, state: FSMContext):
    user_id = message.from_user.id
    email = message.text.strip()
    
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await message.answer("❌ Некорректный email. Пожалуйста, введите правильный email.")
        return
    
    # Отправка результатов на email
    try:
        score = user_data[user_id]["score"]
        result = get_result(score)
        msg = MIMEText(f"Ваш результат теста 2: {score}/20 ({result})")
        msg['Subject'] = "Результаты теста"
        msg['From'] = EMAIL_LOGIN
        msg['To'] = email
        
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(EMAIL_LOGIN, EMAIL_PASSWORD)
            server.sendmail(EMAIL_LOGIN, email, msg.as_string())
        
        await message.answer("✅ Результаты успешно отправлены на ваш email.")
    except Exception as e:
        await message.answer(f"❌ Произошла ошибка при отправке email: {e}")
    
    await state.clear()
    await send_welcome(message)

# Запрос ФИО и номера телефона после третьего теста
async def request_fio_phone(user_id):
    await bot.send_message(user_id, "Результаты третьего теста предлагаем обсудить с нашими специалистами. Для этого оставьте ваши ФИО и номер телефона:")
    await UserState.entering_fio_phone.set()

@router.message(UserState.entering_fio_phone)
async def handle_fio_phone(message: Message, state: FSMContext):
    user_id = message.from_user.id
    fio_phone = message.text.strip()
    
    if len(fio_phone.split()) < 3 or not any(char.isdigit() for char in fio_phone):
        await message.answer("❌ Пожалуйста, введите ваши ФИО и номер телефона в формате: Иванов Иван Иванович +79991234567")
        return
    
    await message.answer("✅ Спасибо! Наши специалисты свяжутся с вами в ближайшее время.")
    await state.clear()
    await send_welcome(message)

# Показ профиля пользователя
async def show_profile(message: Message):
    user_id = message.from_user.id
    
    if user_id not in user_stats:
        await message.answer("❌ Ваш профиль не найден. Попробуйте перезапустить бота (/start).")
        return
    
    username = user_stats[user_id]["username"]
    completed_tests = user_stats[user_id]["completed_tests"]
    
    profile_text = f"👤 Имя пользователя: {username}\n"
    profile_text += f"📊 Пройденные тесты: {', '.join([f'Тест {i+1}' for i in completed_tests]) if completed_tests else 'Нет'}\n"
    
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=False,
        keyboard=[
            [KeyboardButton(text="Тесты")],
            [KeyboardButton(text="Профиль")]
        ]
    )
    
    await message.answer(profile_text, reply_markup=keyboard)

# Загрузка и сохранение данных пользователей
def save_user_stats():
    with open('user_stats.json', 'w') as f:
        json.dump(user_stats, f)

def load_user_stats():
    global user_stats
    try:
        with open('user_stats.json', 'r') as f:
            user_stats = json.load(f)
    except FileNotFoundError:
        user_stats = {}

# Запуск бота
async def main():
    dp.include_router(router)
    load_user_stats()
    await dp.start_polling(bot)
    save_user_stats()

if __name__ == "__main__":
    asyncio.run(main())